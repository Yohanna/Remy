swagger: "2.0"
info:
  version: "0.0.1"
  title: Remy App
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
# basePath: /api
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /restaurants_list:
    x-swagger-router-controller: restaurants_list
    get:
      description: Returns a list of restaurants to the user
      operationId: getRestaurantsList
      tags: 
        - Restaurants
      parameters:
      
        - name: user_id
          in: query
          description: User's ID for customized results
          required: false
          type: integer
          
        - name: location_lat
          in: query
          description: User's Latitude
          required: true
          type: number
          format: double
          default: 44.227917
       
        - name: location_long
          in: query
          description: User's Longitude
          required: true
          type: number
          format: double
          default: -76.495611
       
        - name: distance
          in: query
          description: Max distance to user in meters
          required: false # TODO change to True
          type: integer
          default: 5000
        
        - name: cuisine_type
          in: query
          description: Type of restaurant
          required: false
          type: string
          
        - name: open_now
          in: query
          description: Whether the restaurant is open or not
          required: false # TODO change to True
          type: boolean
          default: true
        
        - name: restaurants_count
          in: query
          description: How many restaurants to return
          required: false
          type: integer
          default: 10
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/RestaurantsListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /users:
    x-swagger-router-controller: users
    get:
      description: Return all users in the DB
      operationId: getAllUsers
      tags:
        - Users
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"      

    post:
      description: Add a User
      operationId: addUser
      tags:
        - Users
      parameters:
        - name: user
          in: body
          required: true
          description: User to add
          schema:
            $ref: '#/definitions/User'
      responses:
        "201":
          description: Success
          schema:
           title: UserID
           type: object
           description: User ID of the newly created user
           properties:
            userID:
              type: integer
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /users/{id}:
    x-swagger-router-controller: users
    get:
      description: Get a single User
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to get
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User does not exist
          schema:
           title: ErrorResponse
           type: object
           properties:
            message:
              type: string 
              default: User does not exist
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      description: Update a User
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to update
          required: true
          type: integer
        - name: user
          in: body
          required: true
          description: New user's info
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Delete a User
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to delete
          required: true
          type: integer
      responses:
        "200":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"      

  /users/{id}/user_metrics:
    x-swagger-router-controller: user_metrics
    get:
      description: Get a single User's metrics
      operationId: getUserMetrics
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to get the metrics for
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserMetric"
        "404":
          description: User metrics does not exist
          schema:
           title: ErrorResponse
           type: object
           properties:
            message:
              type: string 
              default: User metrics does not exist            
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
    post:
      description: Add a single User's metrics. Note that the User has to be already added to the DB before this operation
      operationId: addUserMetrics
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to add the metrics
          type: integer
          required: true
        - name: metrics
          in: body
          required: true
          description: New user's metrics
          schema:
            $ref: '#/definitions/UserMetric'
      responses:
        "201":
          description: Success
          schema:
            properties:
              status:
                type: string
                default: OK
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
    put:
      description: Update a single User's metrics
      operationId: updateUserMetrics
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to update the metrics for
          type: integer
          required: true
        - name: metrics
          in: body
          required: true
          description: New user's metrics
          schema:
            $ref: '#/definitions/UserMetric'
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"  
            
  /users/{id}/recent_search:
    x-swagger-router-controller: recent_search
    get:
      description: Get a user's most recent search
      operationId: getRecentSearch
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to get their recent search
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties:
              timestamp:
                type: string
              restaurants:
                type: array
                items:
                  $ref: '#/definitions/RestaurantsListResponse'

        "404":
          description: User does not have a recent search
          schema:
           title: ErrorResponse
           type: object
           properties:
            message:
              type: string 
              default: User does not have a recent search       
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
    post:
      description: Store a user recent search
      operationId: addRecentSearch
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to add the search for
          type: integer
          required: true
        - name: SearchResults
          in: body
          required: true
          description: Search results results
          schema:
            $ref: '#/definitions/RecentSearch'
      responses:
        "201":
          description: Success
          schema:
           title: searchID
           type: object
           description: The search ID of the newly created search
           properties:
            searchID:
              type: integer
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      description: Delete a User Action
      operationId: deleteRecentSearch
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to delete their search
          required: true
          type: integer
        - name: search_id
          in: query
          required: false
          description: A search ID to delete a specfic search instead of all searches by the user. Do not supply any value for this parameter if you need to delete all recent searches for a specific user.
          type: integer          
      responses:
        "200":
          description: Success
          schema:
            properties:
              affected_rows:
                type: integer
                description: Number of affected rows by this operation
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"     

            
  /users/{id}/user_action:
    x-swagger-router-controller: user_actions
    get:
      description: Get a user's actions
      operationId: getUserAction
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to get their action
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAction'

        "404":
          description: User does not have a recent search
          schema:
           title: ErrorResponse
           type: object
           properties:
            message:
              type: string 
              default: User does not have a recent search       
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
    post:
      description: Store a user action
      operationId: addUserAction
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to add the action for
          type: integer
          required: true
        - name: UserAction
          in: body
          required: true
          description: User Actions
          schema:
            $ref: '#/definitions/UserAction'
      responses:
        "201":
          description: Success
          schema:
            properties:
              status:
                type: string
                default: OK
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
    delete:
      description: Delete a User Action
      operationId: deleteUserAction
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to delete their action
          required: true
          type: integer
          
        - name: restaurant_id
          in: query
          type: string
          required: true
          
        - name: timestamp
          in: query
          type: string
          format: date-time
          required: true

      responses:
        "200":
          description: Success
          schema:
            properties:
              affected_rows:
                type: integer
                description: Number of affected rows by this operation
            
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"              
  
  /account/login:
    x-swagger-router-controller: account
    post:
      description: Log In to the app
      operationId: login
      tags:
        - Account
      parameters:
        - name: LoginInfo
          in: body
          required: true
          description: User's email and password to login
          schema:
            $ref: "#/definitions/UserLoginModel"
   
      responses:
        "200":
          description: Success
          schema:
           title: UserID
           type: object
           properties:
            userID:
              type: integer
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /hello:
    # binds a127 app logic to a route
    x-swagger-router-controller: hello_world
    get:
      description: Returns 'Hello' to the caller
      # used as the method name of the controller
      operationId: hello
      tags:
        - Demo
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorldResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /swagger:
    x-swagger-pipe: swagger_raw

# complex objects have schema definitions
definitions:

  RestaurantsListResponse:
    properties:
      list:
        type: object
        description: A list of restaurants

        
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string
        
        
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string


  UserLoginModel:
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
        
  User:
    required:
      - email
      - password
      - name
    properties:
      email:
        type: string
      password:
        type: string
        format: password
      name:
        type: string
        description: Full name
      gender:
        type: string
        enum:
         - Male
         - Female
        description: User's gender
      student:
        type: integer
        description: Whether the user is a student or not
        default: 1
  
  
  UserMetric:
    properties:
      prefered_price:
        type: integer
      prefered_transportation_method:
        type: string
        enum:
          - Walk
          - Bus
          - Car
      history:
        type: array
        items:
          properties:
            schema:
              $ref: "#/definitions/History"
        description: History of restaurants visited
      favorite_restaurants:
        type: array
        items:
          type: string
        description: User's favorite restaurants, stored as restaurants place_id
      favorite_food:
        type: array
        items:
          type: string
        description: User's favorite food
        
        
  History:
    properties:
      name:
        type: string
        description: Name of restaurant visited
      date:
        type: string
        format: date
        description: Date visited
        
  RecentSearch:
    properties:
      restaurants:
        description: Array of restaurants object (use same data returned by GET /restaurant_list)
        type: array
        items:
          properties:
            restaurant_details:
              description: A single restaurant details as returned by GET /restaurant_list
            restaurant_rank:
              type: integer
              description: Restaurant position in the list


  UserAction:
    properties:
      restaurant_id:
        type: string
      action:
        type: string
        enum:
          - click_from_map
          - click_from_list
          - directions_from_map
          - directions_from_list
          - more_info

