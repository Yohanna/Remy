swagger: "2.0"
info:
  version: "0.0.1"
  title: Remy App
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
# basePath: /api
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /restaurants_list:
    x-swagger-router-controller: restaurants_list
    get:
      description: Returns a list of restaurants to the user
      operationId: getRestaurantsList
      tags: 
        - Restaurants
      parameters:
      
        - name: location_lat
          in: query
          description: User's Latitude
          required: false # TODO change to True
          type: number
          format: double
       
        - name: location_long
          in: query
          description: User's Longitude
          required: false # TODO change to True
          type: number
          format: double
       
        - name: distance
          in: query
          description: Max distance to user in meters
          required: false # TODO change to True
          type: integer
          default: 5000
        
        - name: cuisine_type
          in: query
          description: Type of restaurant
          required: false
          type: string
          
        - name: open_now
          in: query
          description: Whether the restaurant is open or not
          required: false # TODO change to True
          type: boolean
          default: true
        
        - name: restaurants_count
          in: query
          description: How many restaurants to return
          required: false
          type: integer
          default: 10
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/RestaurantsListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /users:
    x-swagger-router-controller: users
    get:
      description: Return all users in the DB
      operationId: getAllUsers
      tags:
        - Users
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"      

    post:
      description: Add a User
      operationId: addUser
      tags:
        - Users
      parameters:
        - name: user
          in: body
          required: true
          description: User to add
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /users/{id}:
    x-swagger-router-controller: users
    get:
      description: Get a single User
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to get
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/User"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      description: Update a User
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to update
          required: true
          type: integer
        - name: user
          in: body
          required: true
          description: New user's info
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Update a User
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to delete
          required: true
          type: integer
      responses:
        "200":
          description: Success
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"      

  /users/{id}/user_metrics:
    x-swagger-router-controller: user_metrics
    get:
      description: Get a single User's metrics
      operationId: getUserMetrics
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to get the metrics for
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserMetric"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
    post:
      description: Add a single User's metrics. Note that the User has to be already added to the DB before this operation
      operationId: addUserMetrics
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to add the metrics
          type: integer
          required: true
        - name: metrics
          in: body
          required: true
          description: New user's metrics
          schema:
            $ref: '#/definitions/UserMetric'
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
    put:
      description: Update a single User's metrics
      operationId: updateUserMetrics
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: The ID of the User to update the metrics for
          type: integer
          required: true
        - name: metrics
          in: body
          required: true
          description: New user's metrics
          schema:
            $ref: '#/definitions/UserMetric'
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"  

  /hello:
    # binds a127 app logic to a route
    x-swagger-router-controller: hello_world
    get:
      description: Returns 'Hello' to the caller
      # used as the method name of the controller
      operationId: hello
      tags:
        - Demo
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorldResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /swagger:
    x-swagger-pipe: swagger_raw

# complex objects have schema definitions
definitions:

  RestaurantsListResponse:
    required:
      - id
      - name
    properties:
      id:
        type: string
        description: A unique ID for referencing this location through Google
      name:
        type: string
        description: The name of the restaurant
      lat:
        type: number
        format: double
        description: The latitude of the restaurant
      lng:
        type: number
        format: double
        description: The longitude of the restaurant
        
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string
        
        
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
        
  User:
    required:
      - email
      - password
      - name
    properties:
      email:
        type: string
      password:
        type: string
        format: password
      name:
        type: string
        description: Full name
      gender:
        type: string
        description: User's gender
      student:
        type: boolean
        description: Whether the user is a student or not
        default: true
  
  
  UserMetric:
    properties:
      prefered_price:
        type: integer
      prefered_transportation_method:
        type: string
        enum:
          - Walk
          - Bus
          - Car
      history:
        type: array
        items:
          properties:
            schema:
              $ref: "#/definitions/History"
        description: History of restaurants visited
      favorite_restaurants:
        type: array
        items:
          type: string
        description: User's favorite restaurants, stored as restaurants IDs
      favorite_food:
        type: array
        items:
          type: string
        description: User's favorite food
        
  History:
    properties:
      name:
        type: string
        description: Name of restaurant visited
      date:
        type: string
        format: date
        description: Date visited

